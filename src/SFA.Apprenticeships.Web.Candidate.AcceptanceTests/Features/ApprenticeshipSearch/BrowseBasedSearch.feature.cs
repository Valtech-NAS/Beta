// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.34209
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SFA.Apprenticeships.Web.Candidate.AcceptanceTests.Features.ApprenticeshipSearch
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("BrowseBasedSearch")]
    [NUnit.Framework.CategoryAttribute("US625")]
    public partial class BrowseBasedSearchFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "BrowseBasedSearch.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "BrowseBasedSearch", "In order to quickly find a suitable apprenticeship vacancy\r\nAs a candidate\r\nI wan" +
                    "t to be able to browse by category and sub category to refine my search", ProgrammingLanguage.CSharp, new string[] {
                        "US625"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Browse based search tab switch")]
        [NUnit.Framework.CategoryAttribute("SmokeTests")]
        public virtual void BrowseBasedSearchTabSwitch()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Browse based search tab switch", new string[] {
                        "SmokeTests"});
#line 8
this.ScenarioSetup(scenarioInfo);
#line 9
 testRunner.Given("I navigated to the ApprenticeshipSearchPage page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 10
 testRunner.When("I choose CategoriesTab", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 11
 testRunner.Then("I am on the ApprenticeshipSearchPage page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Rule",
                        "Value"});
            table1.AddRow(new string[] {
                        "Keywords",
                        "Does Not Exist",
                        ""});
            table1.AddRow(new string[] {
                        "Categories",
                        "Exists",
                        ""});
            table1.AddRow(new string[] {
                        "CategoryItemsCount",
                        "Greater Than",
                        "0"});
#line 12
 testRunner.Then("I see", ((string)(null)), table1, "Then ");
#line 17
 testRunner.Then("I am on the ApprenticeshipSearchPage page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 18
 testRunner.When("I choose KeywordsTab", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 19
 testRunner.And("I am on the ApprenticeshipSearchPage page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Rule",
                        "Value"});
            table2.AddRow(new string[] {
                        "Keywords",
                        "Exists",
                        ""});
            table2.AddRow(new string[] {
                        "Categories",
                        "Does not Exist",
                        ""});
#line 20
 testRunner.Then("I see", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Browse based search happy path")]
        [NUnit.Framework.CategoryAttribute("SmokeTests")]
        public virtual void BrowseBasedSearchHappyPath()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Browse based search happy path", new string[] {
                        "SmokeTests"});
#line 26
this.ScenarioSetup(scenarioInfo);
#line 27
 testRunner.Given("I navigated to the ApprenticeshipSearchPage page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 28
 testRunner.When("I choose CategoriesTab", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Rule",
                        "Value"});
            table3.AddRow(new string[] {
                        "Categories",
                        "Exists",
                        ""});
            table3.AddRow(new string[] {
                        "CategoryItemsCount",
                        "Greater Than",
                        "0"});
#line 29
 testRunner.Then("I see", ((string)(null)), table3, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Rule",
                        "Value"});
            table4.AddRow(new string[] {
                        "Text",
                        "Equals",
                        "Business, Administration and Law"});
#line 33
 testRunner.When("I am on CategoryItems list item matching criteria", ((string)(null)), table4, "When ");
#line 36
 testRunner.And("I choose CategoryRadioButton", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 37
 testRunner.And("I am on the ApprenticeshipSearchPage page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table5.AddRow(new string[] {
                        "Location",
                        "London"});
            table5.AddRow(new string[] {
                        "WithInDistance",
                        "40 miles"});
            table5.AddRow(new string[] {
                        "ApprenticeshipLevel",
                        "All levels"});
#line 38
 testRunner.And("I enter data", ((string)(null)), table5, "And ");
#line 43
 testRunner.And("I choose Browse", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 44
 testRunner.Then("I am on the ApprenticeshipSearchResultPage page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Rule",
                        "Value"});
            table6.AddRow(new string[] {
                        "SearchResultItemsCount",
                        "Equals",
                        "5"});
            table6.AddRow(new string[] {
                        "BrowseTab",
                        "Exists",
                        ""});
            table6.AddRow(new string[] {
                        "Categories",
                        "Exists",
                        ""});
            table6.AddRow(new string[] {
                        "CategoryItemsCount",
                        "Greater Than",
                        "0"});
#line 45
 testRunner.Then("I see", ((string)(null)), table6, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Switch to browse based search")]
        [NUnit.Framework.CategoryAttribute("SmokeTests")]
        public virtual void SwitchToBrowseBasedSearch()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Switch to browse based search", new string[] {
                        "SmokeTests"});
#line 53
this.ScenarioSetup(scenarioInfo);
#line 54
 testRunner.Given("I navigated to the ApprenticeshipSearchPage page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table7.AddRow(new string[] {
                        "Keywords",
                        "Mechanical"});
            table7.AddRow(new string[] {
                        "Location",
                        "Birmingham"});
            table7.AddRow(new string[] {
                        "WithInDistance",
                        "40 miles"});
            table7.AddRow(new string[] {
                        "ApprenticeshipLevel",
                        "All levels"});
#line 55
 testRunner.When("I enter data", ((string)(null)), table7, "When ");
#line 61
 testRunner.And("I choose Search", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 62
 testRunner.And("I am on the ApprenticeshipSearchResultPage page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Rule",
                        "Value"});
            table8.AddRow(new string[] {
                        "Keywords",
                        "Equals",
                        "Mechanical"});
#line 63
 testRunner.Then("I see", ((string)(null)), table8, "Then ");
#line 66
 testRunner.When("I choose BrowseTab", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Rule",
                        "Value"});
            table9.AddRow(new string[] {
                        "Categories",
                        "Exists",
                        ""});
            table9.AddRow(new string[] {
                        "CategoryItemsCount",
                        "Greater Than",
                        "0"});
#line 67
 testRunner.Then("I see", ((string)(null)), table9, "Then ");
#line 71
 testRunner.And("I am on the ApprenticeshipSearchResultPage page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Rule",
                        "Value"});
            table10.AddRow(new string[] {
                        "CategoryLabel",
                        "Equals",
                        "Agriculture, Horticulture and Animal Care"});
#line 72
 testRunner.When("I am on CategoryItems list item matching criteria", ((string)(null)), table10, "When ");
#line 75
 testRunner.And("I choose WrappedElement", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 76
 testRunner.And("I am on the ApprenticeshipSearchResultPage page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 77
 testRunner.And("I choose Search", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 78
 testRunner.Then("I am on the ApprenticeshipSearchResultPage page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Rule",
                        "Value"});
            table11.AddRow(new string[] {
                        "BrowseTab",
                        "Exists",
                        ""});
            table11.AddRow(new string[] {
                        "Categories",
                        "Exists",
                        ""});
            table11.AddRow(new string[] {
                        "CategoryItemsCount",
                        "Greater Than",
                        "0"});
#line 79
 testRunner.Then("I see", ((string)(null)), table11, "Then ");
#line 84
 testRunner.When("I choose SearchTab", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Rule",
                        "Value"});
            table12.AddRow(new string[] {
                        "SearchTab",
                        "Exists",
                        ""});
            table12.AddRow(new string[] {
                        "Keywords",
                        "Equals",
                        "Mechanical"});
#line 85
 testRunner.Then("I see", ((string)(null)), table12, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
